
var OF,$,jasmine,U;OF.api=function(path,options){if(options.method){return OF.api[options.method.toLowerCase()](path,options);}
return OF.api.get(path,options);};$.each(['get','post','put','delete'],function(i,httpMethod){OF.api[httpMethod]=function(path,options){options=$.extend(options,{method:httpMethod.toUpperCase()});return OF.api.sendRequest(path,options);};});OF.api.activeRequests={};OF.api.activeRequestIDs=[];OF.api.allow=true;OF.api.sendRequest=function(path,options){if(!OF.api.allow){return;}
options=options||{};var params=options.params||{};var mock;if(typeof(jasmine)!=='undefined'){if(jasmine.getEnv().currentSpec.mocks){mock=jasmine.getEnv().currentSpec.mocks[path];if(mock){path=mock.url;}}
if(!mock){console.warn('>>>> WARNING <<<< API request not mocked: ',path+'?'+$.urlEncode(options.params));}}
path=$.jsonifyUrl(path);var request=new OF.api.RequestObject($.jsonifyUrl(path),params,options);request.mock=mock;OF.api.activeRequests[request.id]=request;OF.api.activeRequestIDs.push(request.id);if(!OF.device.ios3){request.start();}
if(OF.device.ios3&&OF.api.activeRequestIDs.length===1){request.start();}
return request;};OF.api.RequestObject=function(path,params,options){this.id=U.uniqueId('api_request_');this.page=OF.page;this.background=options.background;this.path=path;this.params=params;this.httpParams=options.httpParams;this.loader=$(options.loader);this.method=options.method||'GET';this.isComplete=false;this.isCancelled=false;this.isStarted=false;this.successCallback=options.success;this.failureCallback=options.failure;this.completeCallback=options.complete;var statusCallbacks={};U.each([200,201,400,401,404,406,409,500,503],function(statusCode){statusCallbacks["on"+statusCode]=options["on"+statusCode];});this.statusCallbacks=statusCallbacks;if(OF.isBrowser){params.session_device_id=OF.device.identifier;params.session_user_id=OF.user.id;params.session_game_id=OF.game.id;}
this.start=function(){OF.log('API Request Started: '+this.method+' '+path+'?'+$.urlEncode(params));this.isStarted=true;if(!this.background){OF.loader.show();}
if(this.loader){if(this.loader.hasClass('button')){this.loader.data('buttonHtml',this.loader.html()).html(_('Loading&hellip;'));}else{this.loader.fadeIn();}}
var sendAction=function(ctx){OF.action('apiRequest',{path:ctx.path,method:ctx.method,params:$.urlEncode(ctx.params),httpParams:$.urlEncode(ctx.httpParams),request_id:ctx.id});};var sendActionRetry=function(ctx){if(OF.init.isLoaded){setTimeout(function(){sendAction(ctx);},500);}else{setTimeout(function(){sendActionRetry(ctx);},250);}};sendActionRetry(this);if(OF.isBrowser){var thisReq=this;$.ajax({url:this.path,data:this.params,type:this.method,dataType:'json',complete:function(xhr,textStatus){OF.api.completeRequest(thisReq.id,xhr.status.toString(),xhr.responseText);}});}};this.complete=function(status,response){var data;if($.isPlainObject(response)){data=response;}else{if($.trim(response).length){try{data=$.parseJSON(response);}catch(e){data={};}}
if(!data){data={};}}
if(this.mock){if(this.mock.callback){this.mock.callback(data);}
if(this.mock.status){status=this.mock.status;}}
this.isComplete=true;if(!this.background){OF.loader.hide();}
if(this.isCancelled||this.page!==OF.page){return;}
if(this.loader){if(this.loader.hasClass('button')){this.loader.html(this.loader.data('buttonHtml'));}else{this.loader.hide();}}
var callback=this.statusCallbacks["on"+status];if(callback){callback(data,status);}
if(status.match(/^2/)){OF.log('API Request Complete: '+this.path);if(OF.isBrowser){console.log('    ',data);}
if(this.successCallback){this.successCallback(data,status);}}else{OF.log('API Request Failed: '+this.path+'    '+response);if(OF.isBrowser){console.log('    ',data);}
if(OF.api.handleDisconnect&&status==='0'){OF.api.handleDisconnect();}else{if(this.failureCallback){var handledFailure=true;handledFailure=this.failureCallback(data,status);if(handledFailure===false){OF.api.handleError(data,status);}}else{OF.api.handleError(data,status);}}}
if(this.completeCallback){this.completeCallback(data,status);}};this.cancel=function(){if(!this.isComplete){this.isCancelled=true;if(this.completeCallback){this.completeCallback({exception:{"class":'CanceledRequest',message:'This request was canceled'}},'408');}}};};OF.api.handleError=function(data,status){if(data.exception){if(status==='0'){if(!OF.unable_to_connect_alerted){OF.alert(_('Unable to Connect'),_('Please check that you have cellular or WiFi service and try again.'));OF.unable_to_connect_alerted=true;}}else{alert(data.exception.message);}}else{OF.alert(_('ERROR: %1',status),_('Oops! There was an error communicating with the server.'));}};OF.api.handleDisconnect=function(){if(!OF.unable_to_connect_alerted){OF.alert(_('Unable to Connect'),_('Please check that you have cellular or WiFi service and try again.'));OF.unable_to_connect_alerted=true;}};OF.api.completeRequest=function(requestID,status,response){var req=OF.api.activeRequests[requestID];if(req){req.complete(status,response);delete OF.api.activeRequests[requestID];OF.api.activeRequestIDs.splice(OF.api.activeRequestIDs.indexOf(requestID),1);}else{OF.log("WARNING: Request ID not found. Maybe it already completed. ID: "+requestID);}
if(OF.device.ios3&&OF.api.activeRequestIDs.length>0){$.defer(function(){OF.api.activeRequests[OF.api.activeRequestIDs[0]].start();});}
if(OF.device.ios3&&OF.api.activeRequestIDs.length===0){OF.contentLoaded();}};OF.api.request=$.deprecate(OF.api,'OF.api.request()','OF.api()');